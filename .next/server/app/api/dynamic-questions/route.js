"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/dynamic-questions/route";
exports.ids = ["app/api/dynamic-questions/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdynamic-questions%2Froute&page=%2Fapi%2Fdynamic-questions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdynamic-questions%2Froute.ts&appDir=C%3A%5CUsers%5CLucas%5CDesktop%5CWorkspace%5CV%C3%B4ti%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CLucas%5CDesktop%5CWorkspace%5CV%C3%B4ti&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdynamic-questions%2Froute&page=%2Fapi%2Fdynamic-questions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdynamic-questions%2Froute.ts&appDir=C%3A%5CUsers%5CLucas%5CDesktop%5CWorkspace%5CV%C3%B4ti%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CLucas%5CDesktop%5CWorkspace%5CV%C3%B4ti&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Lucas_Desktop_Workspace_V_ti_src_app_api_dynamic_questions_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/dynamic-questions/route.ts */ \"(rsc)/./src/app/api/dynamic-questions/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/dynamic-questions/route\",\n        pathname: \"/api/dynamic-questions\",\n        filename: \"route\",\n        bundlePath: \"app/api/dynamic-questions/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Lucas\\\\Desktop\\\\Workspace\\\\VÃ´ti\\\\src\\\\app\\\\api\\\\dynamic-questions\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Lucas_Desktop_Workspace_V_ti_src_app_api_dynamic_questions_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/dynamic-questions/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZkeW5hbWljLXF1ZXN0aW9ucyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZHluYW1pYy1xdWVzdGlvbnMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZkeW5hbWljLXF1ZXN0aW9ucyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNMdWNhcyU1Q0Rlc2t0b3AlNUNXb3Jrc3BhY2UlNUNWJUMzJUI0dGklNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q0x1Y2FzJTVDRGVza3RvcCU1Q1dvcmtzcGFjZSU1Q1YlQzMlQjR0aSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDc0M7QUFDbkg7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92b3RpLz9mNmMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXEx1Y2FzXFxcXERlc2t0b3BcXFxcV29ya3NwYWNlXFxcXFbDtHRpXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGR5bmFtaWMtcXVlc3Rpb25zXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9keW5hbWljLXF1ZXN0aW9ucy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2R5bmFtaWMtcXVlc3Rpb25zXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9keW5hbWljLXF1ZXN0aW9ucy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXEx1Y2FzXFxcXERlc2t0b3BcXFxcV29ya3NwYWNlXFxcXFbDtHRpXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGR5bmFtaWMtcXVlc3Rpb25zXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9keW5hbWljLXF1ZXN0aW9ucy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdynamic-questions%2Froute&page=%2Fapi%2Fdynamic-questions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdynamic-questions%2Froute.ts&appDir=C%3A%5CUsers%5CLucas%5CDesktop%5CWorkspace%5CV%C3%B4ti%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CLucas%5CDesktop%5CWorkspace%5CV%C3%B4ti&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/dynamic-questions/route.ts":
/*!************************************************!*\
  !*** ./src/app/api/dynamic-questions/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_votingAnalyzer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/votingAnalyzer */ \"(rsc)/./src/lib/votingAnalyzer.ts\");\n\n\n// Cache global para evitar reprocessamento\nlet cachedAnalyzer = null;\nlet cachedQuestions = null;\nasync function GET() {\n    try {\n        // Inicializa analyzer se necessÃ¡rio\n        if (!cachedAnalyzer) {\n            cachedAnalyzer = new _lib_votingAnalyzer__WEBPACK_IMPORTED_MODULE_1__.VotingAnalyzer();\n            await cachedAnalyzer.loadVotingData();\n        }\n        // Gera perguntas se necessÃ¡rio\n        if (!cachedQuestions) {\n            const questions = [];\n            // Gera 5 questÃµes dinÃ¢micas\n            for(let i = 0; i < 5; i++){\n                try {\n                    const questionData = await cachedAnalyzer.generateDynamicQuestion();\n                    if (questionData) {\n                        questions.push(questionData);\n                    }\n                } catch (error) {\n                    console.warn(`Erro ao gerar questÃ£o ${i}:`, error);\n                }\n            }\n            cachedQuestions = questions;\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            questions: cachedQuestions\n        });\n    } catch (error) {\n        console.error(\"Erro ao gerar perguntas din\\xe2micas:\", error);\n        // Fallback: retorna perguntas fixas se algo der errado\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            questions: [\n                {\n                    id: \"salario-minimo\",\n                    originalProject: {\n                        id: \"PL 1886/2022\",\n                        title: \"Estabelece sal\\xe1rio m\\xednimo de R$ 1.500\",\n                        description: \"Proposta para aumentar o sal\\xe1rio m\\xednimo nacional para R$ 1.500\",\n                        author: \"Diversos\",\n                        party: \"\",\n                        state: \"\",\n                        date: \"2022\",\n                        status: \"Em tramita\\xe7\\xe3o\",\n                        link: \"\"\n                    },\n                    simplifiedQuestion: \"O sal\\xe1rio m\\xednimo hoje \\xe9 R$ 1.320. Na sua opini\\xe3o, deveria aumentar para R$ 1.500?\",\n                    options: {\n                        favor: \"\\uD83D\\uDC4D Com certeza! \\xc9 muito pouco para viver\",\n                        contra: \"\\uD83D\\uDC4E Melhor n\\xe3o mexer nisso agora\",\n                        abstencao: \"\\uD83E\\uDD37ââï¸ Hmm, n\\xe3o sei bem...\"\n                    },\n                    votingKey: \"salario-minimo\"\n                },\n                {\n                    id: \"meio-ambiente\",\n                    originalProject: {\n                        id: \"PL 2633/2020\",\n                        title: \"Prote\\xe7\\xe3o de terras ind\\xedgenas\",\n                        description: \"Estabelece diretrizes para prote\\xe7\\xe3o de povos ind\\xedgenas\",\n                        author: \"Diversos\",\n                        party: \"\",\n                        state: \"\",\n                        date: \"2020\",\n                        status: \"Em tramita\\xe7\\xe3o\",\n                        link: \"\"\n                    },\n                    simplifiedQuestion: \"Voc\\xea apoiaria proteger as terras ind\\xedgenas mesmo que isso limite um pouco o agroneg\\xf3cio?\",\n                    options: {\n                        favor: \"\\uD83C\\uDF31 Sim! Preservar \\xe9 fundamental\",\n                        contra: \"\\uD83D\\uDE9C N\\xe3o, agroneg\\xf3cio gera empregos\",\n                        abstencao: \"âï¸ \\xc9 complicado... preciso saber mais\"\n                    },\n                    votingKey: \"meio-ambiente\"\n                },\n                {\n                    id: \"impostos\",\n                    originalProject: {\n                        id: \"PEC 45/2019\",\n                        title: \"Imposto sobre Grandes Fortunas\",\n                        description: \"Institui imposto sobre patrim\\xf4nios superiores a R$ 20 milh\\xf5es\",\n                        author: \"Diversos\",\n                        party: \"\",\n                        state: \"\",\n                        date: \"2019\",\n                        status: \"Em tramita\\xe7\\xe3o\",\n                        link: \"\"\n                    },\n                    simplifiedQuestion: \"Se uma pessoa tem mais de R$ 20 milh\\xf5es, ela deveria pagar um imposto extra para ajudar em programas sociais?\",\n                    options: {\n                        favor: \"\\uD83D\\uDCB0 \\xd3bvio! Quem pode mais, contribui mais\",\n                        contra: \"\\uD83D\\uDCC8 N\\xe3o, isso afasta investimentos\",\n                        abstencao: \"\\uD83C\\uDFAF Depende muito de como seria feito\"\n                    },\n                    votingKey: \"impostos\"\n                }\n            ]\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const { answers } = await request.json();\n        if (!cachedAnalyzer) {\n            cachedAnalyzer = new _lib_votingAnalyzer__WEBPACK_IMPORTED_MODULE_1__.VotingAnalyzer();\n            await cachedAnalyzer.loadVotingData();\n        }\n        // Calcula afinidade com base nas respostas reais\n        const affinities = cachedAnalyzer.calculateAffinity(answers);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            affinities: affinities.slice(0, 20) // Top 20 deputados\n        });\n    } catch (error) {\n        console.error(\"Erro ao calcular afinidade:\", error);\n        // Fallback: gera afinidades simuladas\n        const mockAffinities = Array.from({\n            length: 20\n        }, (_, i)=>({\n                deputy: `Deputado ${i + 1}`,\n                party: [\n                    \"PT\",\n                    \"PSDB\",\n                    \"PL\",\n                    \"MDB\",\n                    \"PP\"\n                ][i % 5],\n                state: [\n                    \"SP\",\n                    \"RJ\",\n                    \"MG\",\n                    \"RS\",\n                    \"PR\"\n                ][i % 5],\n                affinity: Math.floor(Math.random() * 100),\n                agreements: Math.floor(Math.random() * 10),\n                disagreements: Math.floor(Math.random() * 5),\n                matches: {}\n            })).sort((a, b)=>b.affinity - a.affinity);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            affinities: mockAffinities\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/dynamic-questions/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/votingAnalyzer.ts":
/*!***********************************!*\
  !*** ./src/lib/votingAnalyzer.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VotingAnalyzer: () => (/* binding */ VotingAnalyzer)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\nclass VotingAnalyzer {\n    // Carrega dados de votaÃ§Ãµes do CSV\n    async loadVotingData() {\n        try {\n            const csvPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"public\", \"images\", \"politicians\", \"deputies\", \"votacoes deputados - 2022 a 2025.csv\");\n            const csvContent = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(csvPath, \"utf-8\");\n            const lines = csvContent.split(\"\\n\").filter((line)=>line.trim());\n            const headers = lines[0].split(\",\").map((h)=>h.trim().replace(/\"/g, \"\"));\n            // Mapear dados\n            this.votingData = [];\n            for(let i = 1; i < lines.length; i++){\n                const columns = this.parseCSVLine(lines[i]);\n                if (columns.length < 2) continue;\n                const deputy = columns[0]?.replace(/\"/g, \"\") || \"\";\n                if (!deputy) continue;\n                const votes = {};\n                // Mapear votos para cada questÃ£o\n                for(let j = 1; j < Math.min(columns.length, headers.length); j++){\n                    const questionKey = headers[j];\n                    const vote = columns[j]?.replace(/\"/g, \"\") || \"\";\n                    if (questionKey && vote) {\n                        votes[questionKey] = vote;\n                    }\n                }\n                this.votingData.push({\n                    deputy,\n                    votes\n                });\n            }\n            console.log(`Dados carregados: ${this.votingData.length} deputados`);\n        } catch (error) {\n            console.error(\"Erro ao carregar dados:\", error);\n            this.votingData = [];\n        }\n    }\n    // Parse manual de linha CSV (considerando vÃ­rgulas dentro de aspas)\n    parseCSVLine(line) {\n        const result = [];\n        let current = \"\";\n        let insideQuotes = false;\n        for(let i = 0; i < line.length; i++){\n            const char = line[i];\n            if (char === '\"') {\n                insideQuotes = !insideQuotes;\n            } else if (char === \",\" && !insideQuotes) {\n                result.push(current.trim());\n                current = \"\";\n            } else {\n                current += char;\n            }\n        }\n        result.push(current.trim());\n        return result;\n    }\n    // ObtÃ©m questÃµes disponÃ­veis para o questionÃ¡rio\n    getAvailableQuestions() {\n        if (this.votingData.length === 0) return [];\n        const allQuestions = new Set();\n        for (const record of this.votingData){\n            Object.keys(record.votes).forEach((question)=>{\n                if (question && question.trim()) {\n                    allQuestions.add(question);\n                }\n            });\n        }\n        return Array.from(allQuestions).filter((q)=>q.length > 10 && // Filtra questÃµes muito curtas\n            !q.toLowerCase().includes(\"total\") // Remove colunas de totais\n        ).slice(0, 20); // Limita a 20 questÃµes\n    }\n    // Gera uma questÃ£o dinÃ¢mica baseada em dados reais\n    async generateDynamicQuestion() {\n        const availableQuestions = this.getAvailableQuestions();\n        if (availableQuestions.length === 0) return null;\n        // Seleciona uma questÃ£o aleatÃ³ria\n        const randomIndex = Math.floor(Math.random() * availableQuestions.length);\n        const projectKey = availableQuestions[randomIndex];\n        // Busca detalhes do projeto\n        const projectDetails = await this.getProjectDetails(projectKey);\n        if (!projectDetails) return null;\n        try {\n            // Usa API de LLM para simplificar\n            const simplifiedData = await this.callLLMForSimplification(projectDetails);\n            return {\n                id: projectDetails.id,\n                originalProject: projectDetails,\n                simplifiedQuestion: simplifiedData.question,\n                options: simplifiedData.options,\n                votingKey: projectKey\n            };\n        } catch (error) {\n            console.error(\"Erro ao simplificar projeto:\", error);\n            // Fallback: simplificaÃ§Ã£o bÃ¡sica\n            return {\n                id: projectDetails.id,\n                originalProject: projectDetails,\n                simplifiedQuestion: this.createBasicQuestion(projectDetails),\n                options: {\n                    favor: \"\\uD83D\\uDC4D Sou a favor desta proposta\",\n                    contra: \"\\uD83D\\uDC4E Sou contra esta proposta\",\n                    abstencao: \"\\uD83E\\uDD37ââï¸ N\\xe3o tenho certeza sobre esta quest\\xe3o\"\n                },\n                votingKey: projectKey\n            };\n        }\n    }\n    // Chama API de LLM para simplificaÃ§Ã£o\n    async callLLMForSimplification(project) {\n        const prompt = `\r\nVocÃª Ã© um assistente que simplifica projetos de lei brasileiros para o pÃºblico geral.\r\n\r\nPROJETO:\r\nTÃ­tulo: ${project.title}\r\nDescriÃ§Ã£o: ${project.description}\r\nAutor: ${project.author} (${project.party}/${project.state})\r\n\r\nTAREFA:\r\n1. Transforme este projeto em uma pergunta simples e clara que qualquer cidadÃ£o entenda\r\n2. Crie 3 opÃ§Ãµes de resposta: a favor, contra e abstenÃ§Ã£o\r\n\r\nREGRAS:\r\n- Use linguagem coloquial e acessÃ­vel\r\n- Foque no impacto real na vida das pessoas\r\n- Mantenha neutralidade polÃ­tica\r\n- Seja objetivo e direto\r\n\r\nFORMATO DE RESPOSTA (JSON):\r\n{\r\n  \"question\": \"pergunta clara e simples\",\r\n  \"options\": {\r\n    \"favor\": \"descriÃ§Ã£o da opÃ§Ã£o a favor\",\r\n    \"contra\": \"descriÃ§Ã£o da opÃ§Ã£o contra\", \r\n    \"abstencao\": \"descriÃ§Ã£o da opÃ§Ã£o de abstenÃ§Ã£o\"\r\n  }\r\n}\r\n`;\n        const apis = [\n            ()=>this.callDeepSeekAPI(prompt),\n            ()=>this.callHuggingFaceAPI(prompt),\n            ()=>this.callOpenAIAPI(prompt),\n            ()=>this.callGeminiAPI(prompt)\n        ];\n        for (const apiCall of apis){\n            try {\n                console.log(\"Tentando API de simplifica\\xe7\\xe3o...\");\n                const result = await apiCall();\n                return result;\n            } catch (error) {\n                console.log(\"API call failed, trying next:\", error);\n                continue;\n            }\n        }\n        throw new Error(\"Todas as APIs de LLM falharam\");\n    }\n    // API DeepSeek\n    async callDeepSeekAPI(prompt) {\n        const apiKey = process.env.DEEPSEEK_API_KEY;\n        if (!apiKey) {\n            throw new Error(\"DeepSeek API not configured\");\n        }\n        const response = await fetch(\"https://api.deepseek.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                model: \"deepseek-chat\",\n                messages: [\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ],\n                temperature: 0.3,\n                max_tokens: 500\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`DeepSeek API failed: ${response.status}`);\n        }\n        const data = await response.json();\n        const content = data.choices[0].message.content;\n        try {\n            return JSON.parse(content);\n        } catch  {\n            // Se nÃ£o for JSON vÃ¡lido, extrair informaÃ§Ãµes\n            return {\n                question: content.split(\"\\n\")[0] || \"Pergunta sobre projeto de lei\",\n                options: {\n                    favor: \"Sou a favor desta proposta\",\n                    contra: \"Sou contra esta proposta\",\n                    abstencao: \"N\\xe3o tenho certeza sobre esta quest\\xe3o\"\n                }\n            };\n        }\n    }\n    // API do Hugging Face (gratuita)\n    async callHuggingFaceAPI(prompt) {\n        const response = await fetch(\"https://api-inference.huggingface.co/models/microsoft/DialoGPT-large\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Bearer hf_demo\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                inputs: prompt,\n                options: {\n                    wait_for_model: true\n                }\n            })\n        });\n        if (!response.ok) throw new Error(\"Hugging Face API failed\");\n        const data = await response.json();\n        // Parse da resposta e extraÃ§Ã£o do JSON\n        try {\n            const text = data[0]?.generated_text || \"\";\n            const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                return JSON.parse(jsonMatch[0]);\n            }\n        } catch (error) {\n            throw new Error(\"Failed to parse Hugging Face response\");\n        }\n        throw new Error(\"No valid response from Hugging Face\");\n    }\n    // API do OpenAI (tem tier gratuito)\n    async callOpenAIAPI(prompt) {\n        // Implementar quando tiver chave da API\n        throw new Error(\"OpenAI API not configured\");\n    }\n    // API do Google Gemini (gratuita)\n    async callGeminiAPI(prompt) {\n        // Implementar quando tiver chave da API\n        throw new Error(\"Gemini API not configured\");\n    }\n    // Busca detalhes de um projeto (mockado por enquanto)\n    async getProjectDetails(projectKey) {\n        // Por enquanto, gera detalhes bÃ¡sicos baseados na chave\n        return {\n            id: this.extractProjectId(projectKey),\n            title: this.extractProjectTitle(projectKey),\n            description: `Projeto de lei: ${projectKey}`,\n            author: \"Deputado(a)\",\n            party: \"Partido\",\n            state: \"Estado\",\n            date: new Date().toISOString().split(\"T\")[0],\n            status: \"Em tramita\\xe7\\xe3o\",\n            link: \"\"\n        };\n    }\n    // Extrai ID do projeto da chave de votaÃ§Ã£o\n    extractProjectId(votingKey) {\n        const match = votingKey.match(/(?:PL|PLP|PEC|MPV|PDL)\\s*[NÂºNÂ°]\\s*(\\d+\\/\\d+)/i);\n        return match ? match[0] : votingKey.substring(0, 50);\n    }\n    // Extrai tÃ­tulo do projeto da chave de votaÃ§Ã£o\n    extractProjectTitle(votingKey) {\n        // Remove data e timestamps\n        let title = votingKey.replace(/^\\d{2}\\/\\d{2}\\/\\d{4}\\s+\\d{2}:\\d{2}:\\d{2}\\s+-\\s+/, \"\");\n        // Limita tamanho\n        if (title.length > 100) {\n            title = title.substring(0, 97) + \"...\";\n        }\n        return title;\n    }\n    // Cria pergunta bÃ¡sica sem LLM\n    createBasicQuestion(project) {\n        const title = project.title || project.id;\n        if (title.toLowerCase().includes(\"sal\\xe1rio\")) {\n            return \"Voc\\xea \\xe9 a favor de aumentar o sal\\xe1rio m\\xednimo?\";\n        } else if (title.toLowerCase().includes(\"educa\\xe7\\xe3o\")) {\n            return \"Voc\\xea apoia investimentos em educa\\xe7\\xe3o?\";\n        } else if (title.toLowerCase().includes(\"sa\\xfade\")) {\n            return \"Voc\\xea \\xe9 a favor de mais recursos para a sa\\xfade?\";\n        } else if (title.toLowerCase().includes(\"imposto\")) {\n            return \"Voc\\xea concorda com mudan\\xe7as nos impostos?\";\n        } else {\n            return `VocÃª Ã© a favor da proposta: ${title.substring(0, 80)}${title.length > 80 ? \"...\" : \"\"}?`;\n        }\n    }\n    // Calcula afinidade do usuÃ¡rio com deputados\n    calculateAffinity(userAnswers) {\n        const results = [];\n        for (const deputyRecord of this.votingData){\n            let agreements = 0;\n            let disagreements = 0;\n            let totalComparisons = 0;\n            const matches = {};\n            for (const [questionId, userAnswer] of Object.entries(userAnswers)){\n                const deputyVote = deputyRecord.votes[questionId];\n                if (!deputyVote || deputyVote === \"N\\xe3o votou\") continue;\n                totalComparisons++;\n                let isAgreement = false;\n                if (userAnswer === \"favor\" && deputyVote === \"Sim\") {\n                    isAgreement = true;\n                } else if (userAnswer === \"contra\" && deputyVote === \"N\\xe3o\") {\n                    isAgreement = true;\n                } else if (userAnswer === \"abstencao\" && (deputyVote === \"Absten\\xe7\\xe3o\" || deputyVote === \"Obstru\\xe7\\xe3o\")) {\n                    isAgreement = true;\n                }\n                if (isAgreement) {\n                    agreements++;\n                } else {\n                    disagreements++;\n                }\n                matches[questionId] = isAgreement;\n            }\n            const affinity = totalComparisons > 0 ? agreements / totalComparisons * 100 : 0;\n            // Busca informaÃ§Ãµes do deputado\n            const deputyInfo = this.getDeputyInfo(deputyRecord.deputy);\n            results.push({\n                deputy: deputyRecord.deputy,\n                party: deputyInfo?.party || \"\",\n                state: deputyInfo?.state || \"\",\n                affinity: Math.round(affinity),\n                agreements,\n                disagreements,\n                matches\n            });\n        }\n        return results.sort((a, b)=>b.affinity - a.affinity);\n    }\n    // Busca informaÃ§Ãµes do deputado\n    getDeputyInfo(deputyName) {\n        // Implementar busca nos dados dos deputados\n        // Por enquanto retorna vazio\n        return null;\n    }\n    constructor(){\n        this.votingData = [];\n        this.projectsData = [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/votingAnalyzer.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdynamic-questions%2Froute&page=%2Fapi%2Fdynamic-questions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdynamic-questions%2Froute.ts&appDir=C%3A%5CUsers%5CLucas%5CDesktop%5CWorkspace%5CV%C3%B4ti%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CLucas%5CDesktop%5CWorkspace%5CV%C3%B4ti&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();